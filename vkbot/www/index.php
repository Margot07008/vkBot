<?php

define('CALLBACK_API_EVENT_CONFIRMATION', 'confirmation');
define('CALLBACK_API_EVENT_MESSAGE_NEW', 'message_new');

require_once 'config.php';
require_once 'bot/bot.php';
require_once 'api/vk_api.php';

require_once 'bot/sendOnePred.php';

require_once '../connect.php';

const BTN_ONE_PRED = [["command"=>'newOne'], "ü•† –†–∞–∑–ª–æ–º–∞—Ç—å –ø–µ—á–µ–Ω—å–∫—É", "blue"];
const BTN_YES = [["command"=>'yes'], "–î–∞", "green"];
const BTN_NO = [["command"=>'no'], "–ù–µ—Ç", "red"];
const BTN_DEL = [["command"=>'del'], "–°–∫—Ä—ã—Ç—å", "white"];
const BTN_SUB = [["command"=>'sub'], "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", "green"];
const BTN_UNSUB = [["command"=>'unsub'], "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è", "red"];

if (!isset($_REQUEST)) {
    exit;
}

callback_handleEvent();

function callback_handleEvent() {
    $event = _callback_getEvent();

    try {
        switch ($event['type']) {
            //–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞
            case CALLBACK_API_EVENT_CONFIRMATION:
                _callback_handleConfirmation();
                break;

            //–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            case CALLBACK_API_EVENT_MESSAGE_NEW:
                _callback_handleMessageNew($event['object']);
                break;

            default:
                _callback_response('Unsupported event');
                break;
        }
    } catch (Exception $e) {
//        log_error($e);
    }

    _callback_okResponse();
    mysqli_close($GLOBALS["mysql"]);
}

function _callback_getEvent() {
    return json_decode(file_get_contents('php://input'), true);
}

function _callback_handleConfirmation() {
    _callback_response(CALLBACK_API_CONFIRMATION_TOKEN);
}

function _callback_handleMessageNew($data) {



    if (mb_strtolower($data['text']) == '–Ω–∞—á–∞—Ç—å')
    {
        sendButton($data['peer_id'], "–•–æ—á–µ—à—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ?", [[BTN_ONE_PRED]]);
    }
    else if (mb_strtolower($data['text']) == '—Å–∫—Ä—ã—Ç—å')
    {
        sendButton($data['peer_id'], "–Ω–∞–ø–∏—à–∏ –Ω–∞—á–∞—Ç—å", [[]]);
    }

    if (bot_userIsAssign($data['peer_id']))
    {
        sendButton($data['peer_id'], "",[BTN_ONE_PRED, BTN_UNSUB]);
    }
    else
    {
        sendButton($data['peer_id'],"", [BTN_ONE_PRED, BTN_SUB]);
    }



    if (isset($data["payload"])) {  //–ø–æ–ª—É—á–∞–µ–º payload
        $payload = json_decode($data["payload"], True); // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –≤ JSON —Ñ–æ—Ä–º–∞—Ç
    } else {
        $payload = null; // –ò–Ω–∞—á–µ –∫–Ω–æ–ø–æ–∫ –Ω–µ—Ç
    }

    $payload = $payload['command'];

    if ($payload == 'newOne')
    {
        vkApi_messagesSend($data['peer_id'], "–†–∞–∑–ª–∞–º—ã–≤–∞—é –ø–µ—á–µ–Ω—å–∫—É...");
        bot_sendMessageOnePrediction($data['peer_id']);
        sendButton($data['peer_id'], "–•–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Ç–∞–∫–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?", [[BTN_YES], [BTN_NO]]);
    }
    else if ($payload == 'yes')
    {
        bot_sendMessageAssing($data['peer_id']);
        sendButton($data['peer_id'], "–•–æ—á–µ—à—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ?", [[BTN_ONE_PRED]]);
    }
    else if ($payload == 'no')
    {
        bot_sendMessageUnsubscribe($data['peer_id']);
        sendButton($data['peer_id'], "–•–æ—á–µ—à—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ?", [[BTN_ONE_PRED]]);
    }

//    if (mb_strtolower($data['text']) == "–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è")
//    {
//        $user_id = $data['peer_id'];
//        bot_sendMessageAssing($user_id);
//    }
//    else if (mb_strtolower($data['text']) == "–æ—Ç–ø–∏—Å–∞—Ç—å—Å—è")
//    {
//        $user_id = $data['peer_id'];
//        bot_sendMessageUnsubscribe($user_id);
//    }

    _callback_okResponse();
}

function _callback_okResponse() {
    _callback_response('ok');
}

function _callback_response($data) {
    echo $data;
    exit();
}




